{"ast":null,"code":"var _jsxFileName = \"/Users/zachaugust/Desktop/face-recognition-brain/src/App.js\";\nimport React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '3784dc030efe4f808ee15a8556a38831'\n});\nconst returnClarifaiRequestOptions = imageUrl => {\n  const PAT = '3784dc030efe4f808ee15a8556a38831';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'zaugust48';\n  const APP_ID = 'Imagerecognition';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'face-detection';\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n          // \"base64\": IMAGE_BYTES_STRING\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input)).then(response => response.json()).then(response => {\n        console.log('hi', response);\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n  //     .then(result => {\n\n  //         const regions = result.outputs[0].data.regions;\n\n  //         regions.forEach(region => {\n  //         // Accessing and rounding the bounding box values\n  //             const boundingBox = region.region_info.bounding_box;\n  //             const topRow = boundingBox.top_row.toFixed(3);\n  //             const leftCol = boundingBox.left_col.toFixed(3);\n  //             const bottomRow = boundingBox.bottom_row.toFixed(3);\n  //             const rightCol = boundingBox.right_col.toFixed(3);\n\n  //             region.data.concepts.forEach(concept => {\n  //             // Accessing and rounding the concept value\n  //                 const name = concept.name;\n  //                 const value = concept.value.toFixed(4);\n\n  //                 console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n\n  //             });\n  //         });\n\n  //     })\n  // .catch(error => console.log('error', error))\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ParticlesBg, {\n        className: \"particles\",\n        num: 200,\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Clarifai","Navigation","FaceRecognition","Logo","ImageLinkForm","Rank","jsxDEV","_jsxDEV","app","App","apiKey","returnClarifaiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","constructor","onInputChange","event","setState","input","target","value","onButtonSubmit","state","fetch","then","response","json","console","log","id","user","count","Object","assign","entries","displayFaceBox","calculateFaceLocation","catch","err","box","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","num","type","bg"],"sources":["/Users/zachaugust/Desktop/face-recognition-brain/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\n\n\nconst app = new Clarifai.App({\n    apiKey: '3784dc030efe4f808ee15a8556a38831'\n});\n\nconst returnClarifaiRequestOptions = (imageUrl) => {\n    const PAT = '3784dc030efe4f808ee15a8556a38831';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n    const USER_ID = 'zaugust48';\n    const APP_ID = 'Imagerecognition';\n// Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'face-detection';\n    const IMAGE_URL = imageUrl;\n\n     const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                        // \"base64\": IMAGE_BYTES_STRING\n                    }\n                }\n            }\n        ]\n    });\n    const requestOptions= {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    \n    };\n    return requestOptions\n}\n    \n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n    }\n  }\n\n\n    onInputChange = (event) => {\n        this.setState({input: event.target.value});\n    }\n\n    onButtonSubmit = () => {\n        this.setState({imageUrl: this.state.input});\n        fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n            .then(response => response.json())\n            .then(response => {\n                console.log('hi', response)\n                if (response) {\n                    fetch('http://localhost:3000/image', {\n                        method: 'put',\n                        headers: {'Content-Type': 'application/json'},\n                        body: JSON.stringify({\n                            id: this.state.user.id\n                        })\n                    })\n                        .then(response => response.json())\n                        .then(count => {\n                            this.setState(Object.assign(this.state.user, { entries: count}))\n                        })\n                \n            }\n            this.displayFaceBox(this.calculateFaceLocation(response))\n          })\n          .catch(err => console.log(err));\n    }\n                      \n                \n                    //     .then(result => {\n\n                    //         const regions = result.outputs[0].data.regions;\n\n                    //         regions.forEach(region => {\n                    //         // Accessing and rounding the bounding box values\n                    //             const boundingBox = region.region_info.bounding_box;\n                    //             const topRow = boundingBox.top_row.toFixed(3);\n                    //             const leftCol = boundingBox.left_col.toFixed(3);\n                    //             const bottomRow = boundingBox.bottom_row.toFixed(3);\n                    //             const rightCol = boundingBox.right_col.toFixed(3);\n\n                    //             region.data.concepts.forEach(concept => {\n                    //             // Accessing and rounding the concept value\n                    //                 const name = concept.name;\n                    //                 const value = concept.value.toFixed(4);\n\n                    //                 console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n                                    \n                    //             });\n                    //         });\n\n                    //     })\n                    // .catch(error => console.log('error', error))\n                    \n\n    render() {\n        return (\n            <div className=\"App\">                \n                <Navigation />\n                <ParticlesBg className='particles' num={200} type=\"cobweb\" bg={true} />\n                <Logo />\n                <Rank />\n                <ImageLinkForm \n                    onInputChange={this.onInputChange} \n                    onButtonSubmit={this.onButtonSubmit}\n                />               \n                <FaceRecognition imageUrl={this.state.imageUrl}/>       \n           </div>\n        );\n    }\n}\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,eAAe,MAAM,8CAA8C;AAC1E,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAInB,MAAMC,GAAG,GAAG,IAAIR,QAAQ,CAACS,GAAG,CAAC;EACzBC,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,MAAMC,4BAA4B,GAAIC,QAAQ,IAAK;EAC/C,MAAMC,GAAG,GAAG,kCAAkC;EAClD;EACA;EACI,MAAMC,OAAO,GAAG,WAAW;EAC3B,MAAMC,MAAM,GAAG,kBAAkB;EACrC;EACI,MAAMC,QAAQ,GAAG,gBAAgB;EACjC,MAAMC,SAAS,GAAGL,QAAQ;EAEzB,MAAMM,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;IACxB,aAAa,EAAE;MACX,SAAS,EAAEN,OAAO;MAClB,QAAQ,EAAEC;IACd,CAAC;IACD,QAAQ,EAAE,CACN;MACI,MAAM,EAAE;QACJ,OAAO,EAAE;UACL,KAAK,EAAEE;UACP;QACJ;MACJ;IACJ,CAAC;EAET,CAAC,CAAC;EACF,MAAMI,cAAc,GAAE;IAClBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,eAAe,EAAE,MAAM,GAAGV;IAC9B,CAAC;IACDW,IAAI,EAAEN;EAEV,CAAC;EACD,OAAOG,cAAc;AACzB,CAAC;AAID,MAAMZ,GAAG,SAASX,SAAS,CAAC;EAC1B2B,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAC,KASRC,aAAa,GAAIC,KAAK,IAAK;MACvB,IAAI,CAACC,QAAQ,CAAC;QAACC,KAAK,EAAEF,KAAK,CAACG,MAAM,CAACC;MAAK,CAAC,CAAC;IAC9C,CAAC;IAAA,KAEDC,cAAc,GAAG,MAAM;MACnB,IAAI,CAACJ,QAAQ,CAAC;QAAChB,QAAQ,EAAE,IAAI,CAACqB,KAAK,CAACJ;MAAK,CAAC,CAAC;MAC3CK,KAAK,CAAC,qCAAqC,GAAG,gBAAgB,GAAG,UAAU,EAAEvB,4BAA4B,CAAC,IAAI,CAACsB,KAAK,CAACJ,KAAK,CAAC,CAAC,CACvHM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACC,QAAQ,IAAI;QACdE,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEH,QAAQ,CAAC;QAC3B,IAAIA,QAAQ,EAAE;UACVF,KAAK,CAAC,6BAA6B,EAAE;YACjCZ,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cAAC,cAAc,EAAE;YAAkB,CAAC;YAC7CC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC;cACjBoB,EAAE,EAAE,IAAI,CAACP,KAAK,CAACQ,IAAI,CAACD;YACxB,CAAC;UACL,CAAC,CAAC,CACGL,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACO,KAAK,IAAI;YACX,IAAI,CAACd,QAAQ,CAACe,MAAM,CAACC,MAAM,CAAC,IAAI,CAACX,KAAK,CAACQ,IAAI,EAAE;cAAEI,OAAO,EAAEH;YAAK,CAAC,CAAC,CAAC;UACpE,CAAC,CAAC;QAEd;QACA,IAAI,CAACI,cAAc,CAAC,IAAI,CAACC,qBAAqB,CAACX,QAAQ,CAAC,CAAC;MAC3D,CAAC,CAAC,CACDY,KAAK,CAACC,GAAG,IAAIX,OAAO,CAACC,GAAG,CAACU,GAAG,CAAC,CAAC;IACrC,CAAC;IAnCD,IAAI,CAAChB,KAAK,GAAG;MACXJ,KAAK,EAAE,EAAE;MACTjB,QAAQ,EAAE,EAAE;MACZsC,GAAG,EAAE,CAAC;IACR,CAAC;EACH;EAiCkB;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;;EAGhBC,MAAMA,CAAA,EAAG;IACL,oBACI5C,OAAA;MAAK6C,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAChB9C,OAAA,CAACN,UAAU;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdlD,OAAA,CAACR,WAAW;QAACqD,SAAS,EAAC,WAAW;QAACM,GAAG,EAAE,GAAI;QAACC,IAAI,EAAC,QAAQ;QAACC,EAAE,EAAE;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvElD,OAAA,CAACJ,IAAI;QAAAmD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACRlD,OAAA,CAACF,IAAI;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACRlD,OAAA,CAACH,aAAa;QACVsB,aAAa,EAAE,IAAI,CAACA,aAAc;QAClCM,cAAc,EAAE,IAAI,CAACA;MAAe;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eACFlD,OAAA,CAACL,eAAe;QAACU,QAAQ,EAAE,IAAI,CAACqB,KAAK,CAACrB;MAAS;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC;EAEb;AACJ;AACA,eAAehD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}