{"ast":null,"code":"var _jsxFileName = \"/Users/zachaugust/Desktop/face-recognition-brain/src/App.js\";\nimport React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '3784dc030efe4f808ee15a8556a38831'\n});\nconst setupClarifai = imageUrl => {\n  const PAT = '3784dc030efe4f808ee15a8556a38831';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'zaugust48';\n  const APP_ID = 'Imagerecognition';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'face-detection';\n  const IMAGE_URL = imageUrl;\n  return raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n          // \"base64\": IMAGE_BYTES_STRING\n        }\n      }\n    }]\n  });\n};\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key ' + PAT\n  },\n  body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.json()).then(result => {\n  const regions = result.outputs[0].data.regions;\n  regions.forEach(region => {\n    // Accessing and rounding the bounding box values\n    const boundingBox = region.region_info.bounding_box;\n    const topRow = boundingBox.top_row.toFixed(3);\n    const leftCol = boundingBox.left_col.toFixed(3);\n    const bottomRow = boundingBox.bottom_row.toFixed(3);\n    const rightCol = boundingBox.right_col.toFixed(3);\n    region.data.concepts.forEach(concept => {\n      // Accessing and rounding the concept value\n      const name = concept.name;\n      const value = concept.value.toFixed(4);\n      console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n    });\n  });\n}).catch(error => console.log('error', error));\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n    this.onButtonSubmit = () => {\n      console.log('click');\n    };\n    this.state = {\n      input: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        className: \"particles\",\n        num: 200,\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Clarifai","Navigation","FaceRecognition","Logo","ImageLinkForm","Rank","jsxDEV","_jsxDEV","app","App","apiKey","setupClarifai","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","MODEL_VERSION_ID","then","response","json","result","regions","outputs","data","forEach","region","boundingBox","region_info","bounding_box","topRow","top_row","toFixed","leftCol","left_col","bottomRow","bottom_row","rightCol","right_col","concepts","concept","name","value","console","log","catch","error","constructor","onInputChange","event","target","onButtonSubmit","state","input","render","className","children","num","type","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/zachaugust/Desktop/face-recognition-brain/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\n\n\nconst app = new Clarifai.App({\n    apiKey: '3784dc030efe4f808ee15a8556a38831'\n});\n\nconst setupClarifai = (imageUrl) => {\n    const PAT = '3784dc030efe4f808ee15a8556a38831';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n    const USER_ID = 'zaugust48';\n    const APP_ID = 'Imagerecognition';\n// Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'face-detection';\n    const IMAGE_URL = imageUrl;\n\n    return raw = JSON.stringify({\n    \"user_app_id\": {\n        \"user_id\": USER_ID,\n        \"app_id\": APP_ID\n    },\n    \"inputs\": [\n        {\n            \"data\": {\n                \"image\": {\n                    \"url\": IMAGE_URL\n                    // \"base64\": IMAGE_BYTES_STRING\n                }\n            }\n        }\n    ]\n});\n\n}\nconst requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n    .then(response => response.json())\n    .then(result => {\n\n        const regions = result.outputs[0].data.regions;\n\n        regions.forEach(region => {\n            // Accessing and rounding the bounding box values\n            const boundingBox = region.region_info.bounding_box;\n            const topRow = boundingBox.top_row.toFixed(3);\n            const leftCol = boundingBox.left_col.toFixed(3);\n            const bottomRow = boundingBox.bottom_row.toFixed(3);\n            const rightCol = boundingBox.right_col.toFixed(3);\n\n            region.data.concepts.forEach(concept => {\n                // Accessing and rounding the concept value\n                const name = concept.name;\n                const value = concept.value.toFixed(4);\n\n                console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n                \n            });\n        });\n\n    })\n    .catch(error => console.log('error', error));\n\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n        }\n    }\n\n    onInputChange = (event) => {\n        console.log(event.target.value);\n    }\n\n    onButtonSubmit = () => {\n        console.log('click');\n\n\n    }\n\n    render() { \n        return (\n            <div className=\"App\">\n                <ParticlesBg className='particles' num={200} type=\"cobweb\" bg={true} />\n                <Navigation />\n                <Logo />\n                <Rank />\n                <ImageLinkForm \n                    onInputChange={this.onInputChange} \n                    onButtonSubmit={this.onButtonSubmit}\n                />\n                <FaceRecognition />       \n           </div>\n    );\n  }\n}\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}